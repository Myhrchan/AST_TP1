<!DOCTYPE html>
<html lang="en">

<head>
  <% include partial/head %>
</head>

<body class="container">
  <div class="col-md-6.col-md-offset-3">
    <h1>Hello
      <%= name %>
    </h1>
    <button class="btn btn-success" id="show-metrics">
      Bring the metrics
    </button>
    <button class="btn btn-success" id="add-metrics">
      Add metrics
    </button>
    <button class="btn btn-danger" href="/logout" onClick='document.location.href="/logout"'>
      Logout
    </button>
    <div id="metrics"></div>
    <div id="form">
      <form>
        Key: <input type="text" name="key" id="key"><br>
        Timestamp: <input type="text" name="timestamp" id="timestamp"><br>
        Value: <input type="text" name="value" id="value"><br>
        <button class="btn btn-success" id="save-metrics">
          Save
        </button>
      </form>
    </div>
    <svg width="600" height="500"></svg>
    <p> Order graph by:
      <button class="btn btn-success" id="button-key">
        Key
      </button><button class="btn btn-success" id="button-timestamp">
        Timestamp
      </button>
      <button class="btn btn-success" id="button-value">
        Value
      </button>
    </p>
  </div>
</body>

<script>

  var key = [];
  var timestamp = [];
  var value = [];
  var dataForGraph = null;

  $(document).ready(function () {
    $("#form").css("display", "none");
  })

  function getMetrics() {
    $('#metrics').empty()
    //print metrics 
    $.getJSON('/metrics/all', {}, (data) => {
      const content = data.map(d => {
        return `<p id="metric-${d[0]}">
          <button class="btn btn-danger" id="delete-metrics-${d[0]}">Delete</button>
          <button class="btn btn-success" id="update-metrics-${d[0]}">Update</button>
          key: <b class="key">${d[0]}</b>, 
          timestamp: <b class="timestamp">${d[1].timestamp}</b>, 
          value: <b class="value">${d[1].value}</b></p>`
      })
      $("#metrics").append(content.join("\n"))

      //update general variables for graphs
      key = [];
      timestamp = [];
      value = [];
      $('.key').each(function( index ) {
        key.push($( this ).text());
      });
      $('.timestamp').each(function( index ) {
        timestamp.push($( this ).text());
      });
      $('.value').each(function( index ) {
        value.push($( this ).text());
      });

      drawGraph();
    })    
  }

  $('#show-metrics').click((e) => {
    e.preventDefault()
    getMetrics()
  })

  $('#metrics').on('click', 'button[id^="delete-metrics"]', (e) => {
    key = e.target.id.split('-')[2]
    $.ajax({
      url: '/metrics/'+ key,
      type: 'DELETE',
      success: () => {
        $("#metric-"+key).remove()
      }
    });
  })

  $('#metrics').on('click', 'button[id^="update-metrics"]', (e) => {
    key = e.target.id.split('-')[2]

    if ($("#form").css("display") == "none") {
      $("#form").css("display", "block");
      $('#add-metrics').html('Hide form');
    }
    
    $("#key").val(key)
    $("#timestamp").val($('#metric-'+key +' .timestamp').text())
    $("#value").val($('#metric-'+key +' .value').text())

    $("#key").prop('disabled', true);
    $("#timestamp").prop('disabled', true);
  })

  $('#add-metrics').click((e) => {

    $("#key").prop('disabled', false);
    $("#timestamp").prop('disabled', false);

    if ($("#form").css("display") == "block") {
      $("#form").css("display", "none");
      $('#add-metrics').html('Add metric');
      $("#key").val("")
      $("#timestamp").val("")
      $("#value").val("")
    }
    else {
      $("#form").css("display", "block");
      $('#add-metrics').html('Hide form');
    }
  })

  $('#save-metrics').click((e) => {
    e.preventDefault()
    if ($('#key').val() == '' || $('#timestamp').val() == '' || $('#value').val() == '') {
      alert("Missing value")
      return
    }

    $.post('/metrics/add',
      {
        key: $('#key').val(),
        timestamp: $('#timestamp').val(),
        value: $('#value').val()
      }, (data) => {
        $('#key').val('')
        $('#value').val('')
        $('#timestamp').val('')
      })

    $("#form").css("display", "none");
    $('#add-metrics').html('Add metric');
    getMetrics()
  })

  $('#button-key').click((e) => {
    dataForGraph = "key";
    drawGraph();
  });

  $('#button-timestamp').click((e) => {
    dataForGraph = "timestamp";
    drawGraph();
  });

  $('#button-value').click((e) => {
    dataForGraph = "value";
    drawGraph();
  });

  function computeData(arr){
    var a = [], b = [], prev;

    arr.sort();
    for ( var i = 0; i < arr.length; i++ ) {
        if ( arr[i] !== prev ) {
            a.push(arr[i]);
            b.push(1);
        } else {
            b[b.length-1]++;
        }
        prev = arr[i];
    }

    return [a, b];
  }

  function drawGraph(){

    var tmp;

    if(dataForGraph == "timestamp") tmp = timestamp;
    else if(dataForGraph == "key") tmp = key;
    else{
      tmp = value;
      dataForGraph = "value";
    } 

    var label, dataset;
    [label, dataset] = computeData(tmp);

    data = dataset.map(function(d, index) { return [label[index], d]; });

    d3.select("svg").selectAll("*").remove();

    var svg = d3.select("svg"),
        margin = 200,
        width = svg.attr("width") - margin,
        height = svg.attr("height") - margin;

    var xScale = d3.scaleBand().range ([0, width]).padding(0.4),
        yScale = d3.scaleLinear().range ([height, 0]);

    var g = svg.append("g")
               .attr("transform", "translate(" + 100 + "," + 100 + ")");

    xScale.domain(data.map(function(d) { return d[0]; }));
    yScale.domain([0, d3.max(dataset)]);

    g.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(xScale));

    g.append("g")
    .call(d3.axisLeft(yScale).tickFormat(function(d){
        return d;
    }).ticks(10))
    
    g.selectAll(".bar")
         .data(data)
         .enter().append("rect")
         .attr("class", "bar")
         .attr("x", function(d) { return xScale(d[0]); })
         .attr("y", function(d) { return yScale(d[1]); })
         .attr("width", xScale.bandwidth())
         .attr("height", function(d) { return height - yScale(d[1]); });

    svg.append("text")
        .attr("transform", "translate(100,0)")
        .attr("x", 50)
        .attr("y", 50)
        .attr("font-size", "24px")
        .text("Number of metrics by "+dataForGraph)
  }
       
</script>

</html>