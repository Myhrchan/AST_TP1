<!DOCTYPE html>
<html lang="en">

<head>
  <% include partial/head %>
</head>

<body class="container">
  <div class="col-md-6.col-md-offset-3">
    <h1>Hello
      <%= name %>
    </h1>
    <button class="btn btn-success" id="show-metrics">
      Bring the metrics
    </button>
    <button class="btn btn-success" id="add-metrics">
      Add metrics
    </button>
    <button class="btn btn-danger" href="/logout" onClick='document.location.href="/logout"'>
      Logout
    </button>
    <div id="metrics"></div>
    <div id="form">
      <form>
        Key: <input type="text" name="key" id="key"><br>
        Value: <input type="text" name="value" id="value"><br>
        <button class="btn btn-success" id="save-metrics">
          Save
        </button>
      </form>
    </div>
    <dig id="graph"></dig>
  </div>
</body>

<script>

  var tmpTimestamp;

  $(document).ready(function () {
    $("#form").css("display", "none");
  })

  //Retrieve metrics
  function getMetrics() {
    $('#metrics').empty()
    //print metrics 
    $.getJSON('/metrics/all', {}, (data) => {
      const content = data.map((d, index) => {
        return `<p id="metric-${index}">
          <button class="btn btn-danger" id="delete-metrics-${index}">Delete</button>
          <button class="btn btn-success" id="update-metrics-${index}">Update</button>
          key: <b class="key">${d[0]}</b>, 
          value: <b class="value">${d[1].value}</b>
          <a id="timestamp-${index}">${d[1].timestamp}</a></p>`
      })
      $("#metrics").append(content.join("\n"))

      drawGraph();
    })
  }

  //Show metrics on sceen
  $('#show-metrics').click((e) => {
    e.preventDefault()
    getMetrics()
  })

  //Delete a metric
  $('#metrics').on('click', 'button[id^="delete-metrics"]', (e) => {
    var index = e.target.id.split('-')[2];
    var key = $("#metric-" + index).find(".key").text();

    $.ajax({
      url: '/metrics/' + key,
      data: { timestamp: $('#timestamp-' + index).text() },
      type: 'DELETE',
      success: () => {
        $("#metric-" + index).remove()
      }
    });
  })

  //Update a metric
  $('#metrics').on('click', 'button[id^="update-metrics"]', (e) => {
    var index = e.target.id.split('-')[2]
    var key = $("#" + e.target.parentNode.id).find(".key").text();
    tmpTimestamp = $("#" + e.target.parentNode.id).find("#timestamp-" + index).text();

    if ($("#form").css("display") == "none") {
      $("#form").css("display", "block");
      $('#add-metrics').html('Hide form');
    }

    $("#key").val(key)
    $("#value").val($('#metric-' + index + ' .value').text())

    $("#key").prop('disabled', true);
  })

  //Toggle form to add a metric
  $('#add-metrics').click((e) => {

    tmpTimestamp = undefined;

    $("#key").prop('disabled', false);

    if ($("#form").css("display") == "block") {
      $("#form").css("display", "none");
      $('#add-metrics').html('Add metric');
      $("#key").val("")
      $("#value").val("")
    }
    else {
      $("#form").css("display", "block");
      $('#add-metrics').html('Hide form');
    }
  })

  //Save a metric
  $('#save-metrics').click((e) => {
    e.preventDefault()
    if ($('#key').val() == '' || $('#timestamp').val() == '' || $('#value').val() == '') {
      alert("Missing value")
      return
    }

    if (!$.isNumeric($('#value').val())) {
      alert("Please enter a valid number in value")
      return
    }

    $.post('/metrics/add',
      {
        key: $('#key').val(),
        value: $('#value').val(),
        timestamp: tmpTimestamp
      }, (data) => {
        $('#key').val('')
        $('#value').val('')
      })

    tmpTimestamp = undefined;

    $("#form").css("display", "none");
    $('#add-metrics').html('Add metric');
    getMetrics()
  })

  // This is a comparison function that will result in dates being sorted in
  // ASCENDING order.
  var date_sort_asc = function (e1, e2) {

    if (e1[0] > e2[0]) return 1;
    if (e1[0] < e2[0]) return -1;
    return 0;
  };

  function drawGraph() {

    $.getJSON('/metrics/all', {}, (data) => {
      const content = data.map(d => {
        return [new Date(parseInt(d[1].timestamp/1000) *1000), d[1].value];
      })

      content.sort(date_sort_asc);
      
      d3.select("svg").remove();

      // set the dimensions and margins of the graph
      var margin = { top: 20, right: 20, bottom: 30, left: 50 },
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

      // set the ranges
      var x = d3.scaleTime().range([0, width]);
      var y = d3.scaleLinear().range([height, 0]);

      // define the line
      var valueline = d3.line()
        .x(function (d) { return x(d[0]); })
        .y(function (d) { return y(d[1]); });

      // append the svg obgect to the body of the page
      // appends a 'group' element to 'svg'
      // moves the 'group' element to the top left margin
      var svg = d3.select("#graph").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

      // gridlines in x axis function
      function make_x_gridlines() {
        return d3.axisBottom(x)
          .ticks(5)
      }

      // gridlines in y axis function
      function make_y_gridlines() {
        return d3.axisLeft(y)
          .ticks(5)
      }

      // Scale the range of the data
      x.domain(d3.extent(content, function (d) { return d[0]; }));
      y.domain([0, d3.max(content.map(function (d) { return d[1]; }))]);

      // add the X gridlines
      svg.append("g")
        .attr("class", "grid")
        .attr("transform", "translate(0," + height + ")")
        .call(make_x_gridlines()
          .tickSize(-height)
          .tickFormat("")
        )

      // add the Y gridlines
      svg.append("g")
        .attr("class", "grid")
        .call(make_y_gridlines()
          .tickSize(-width)
          .tickFormat("")
        )

      // add the valueline path.
      svg.append("path")
        .data([content])
        .attr("class", "line")
        .attr("d", valueline);

      // add the X Axis
      svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x));

      // add the Y Axis
      svg.append("g")
        .call(d3.axisLeft(y));

      svg.append("text")
        .attr("transform", "translate(100,0)")
        .attr("x", 50)
        .attr("y", 50)
        .attr("font-size", "24px")
        .text("Metrics over time")
    });
  }




</script>

</html>